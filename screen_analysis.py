# Methods for plotting and analyzing screen data tables generated by process_experiments.py


import matplotlib.pyplot as plt
import pandas as pd
import os
import sys
import numpy as np
import scipy as sp


##Matplotlib defaults
plt.rcParams['font.sans-serif'] = ['Helvetica']
plt.rcParams['font.size'] = 8
plt.rcParams['font.weight'] = 'regular'
plt.rcParams['text.color'] = almost_black

axisLineWidth = .5
plt.rcParams['axes.linewidth'] = axisLineWidth
plt.rcParams['lines.linewidth'] = 1.5

plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams['axes.edgecolor'] = almost_black
plt.rcParams['axes.labelcolor'] = almost_black
plt.rcParams['axes.color_cycle'] = dark2_all

plt.rcParams['patch.edgecolor'] = 'none'
plt.rcParams['patch.linewidth'] = .25
plt.rcParams['patch.facecolor'] = dark2_all[0]

plt.rcParams['savefig.dpi']=300
plt.rcParams['savefig.format'] = 'svg'
plt.rcParams['legend.frameon'] = False

plt.rcParams['legend.handletextpad'] = .25
plt.rcParams['legend.fontsize'] = 14

plt.rcParams['ytick.direction'] = 'out'
plt.rcParams['ytick.color'] = almost_black
plt.rcParams['ytick.major.width'] = axisLineWidth
plt.rcParams['xtick.direction'] = 'out'
plt.rcParams['xtick.color'] = almost_black
plt.rcParams['xtick.major.width'] = axisLineWidth

def loadData(experimentName, collapsedToTranscripts = True):
    dataDict = {'library': pd.read_csv(experimentName + '_librarytable.txt',sep='\t',header=0,index_col=0),
    'raw counts': pd.read_csv(experimentName + '_rawcountstable.txt',sep='\t',header=range(3),index_col=range(1)),
    'counts': pd.read_csv(experimentName + '_mergedcountstable.txt',sep='\t',header=range(2),index_col=range(1)),
    'phenotypes': pd.read_csv(experimentName + '_phenotypetable.txt',sep='\t',header=range(2),index_col=range(1))}
    
    if collapsedToTranscripts:
        dataDict['transcript scores'] = pd.read_csv(experimentName + '_genetable.txt',sep='\t',header=range(3),index_col=range(2))
    
    dataDict['gene scores'] = pd.read_csv(experimentName + '_genetable_collapsed.txt',sep='\t',header=range(3),index_col=range(1))
    
    return dataDict


# def rasteredScatter(series1,series2,label1,label2,outfilename):
#     # print outfilename
#     pass
# 
# def generateHistogram(series, label, outfilename):
#     pass